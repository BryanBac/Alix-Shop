import Bar from "@/components/bar";
import { useState, useEffect } from "react";
import Head from 'next/head'
import styles from '@/styles/Configuracion.module.css'
import modificarDocumento from "./api/firebase/update-data";
import enviar from "./api/firebase/post-data";
import obtener from "./api/firebase/get-data";
import hashPassword from "./api/auth/hash";
import MensajeModal from "@/components/popup/MensajeModal";
import ModalPopUp from "@/components/popup/popup";
import TablaUsuarios from "@/components/tablaUsuarios";
import { onAuthStateChanged } from 'firebase/auth';
import { authG } from "../../firebase";
import { useRouter } from "next/router";

const checkAuth = (callback) => {
  return onAuthStateChanged(authG, (user) => {
    callback(user);
  });
};

export default function Configuracion() {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [contador, setContador] = useState([])
  const [usuarios, setUsuarios] = useState([])
  const [actualizar, setActualizar] = useState(false)
  const [usuario, setUsuario] = useState("")
  const [password, setPassword] = useState("")
  const [openPopUp, setOpenPopUp] = useState(false)
  const [openPopUp2, setOpenPopUp2] = useState(false)
  const [selectedSources, setSelectedSources] = useState([]);
  // para los permisos
  const [permisos, setPermisos] = useState(() => {
    if (typeof window !== 'undefined' && window.sessionStorage) {
      const all = sessionStorage.getItem('permisos');
      return JSON.parse(all)
    } else {
      return []
    }
  })
  const router = useRouter();
  useEffect(() => {
    const unsubscribe = checkAuth((user) => {
      if (!user) {
        // Redirect to the login page if the user is not logged in
        router.replace('/');
      }
    });

    return () => unsubscribe();
  }, []);

  useEffect(() => {
    if (permisos.length > 0) {
      if (typeof window !== 'undefined' && window.sessionStorage) {
        if (permisos.includes("Ver Usuarios")) {

        } else {
          router.replace("/inicio")
        }
      }
    }
  }, [permisos])

  const cambiarPedido = () => {
    modificarDocumento(process.env.NEXT_PUBLIC_CONTADOR_ID, "contadorPedido", {
      contador: Number(contador),
      id: process.env.NEXT_PUBLIC_CONTADOR_ID
    }).then(() => {
      setContador("")
      setOpenPopUp2(true)
    })
  }

  const crearUsuario = () => {
    enviar("usuarios", {
      usuario: usuario,
      email: password,
      tipo: 1,
      permisos: selectedSources
    }).then(() => {
      setUsuario("")
      setPassword("")
      setSelectedSources([])
      setOpenPopUp(true)
      setActualizar(true)
    })
  }

  const fetchData = async () => {
    try {
      const result = await obtener("usuarios");
      setUsuarios(result)
    } catch (error) {
      // Handle the error if needed
      console.error("Error fetching data:", error);
    }
  };
  useEffect(() => {
    fetchData()
  }, [])

  useEffect(() => {
    if (actualizar) {
      fetchData()
      setActualizar(false)
    }
  }, [actualizar])

  useEffect(() => {
    console.log(permisos)
  }, [])

  return (
    <>
      <Head>
        <title>Alix Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/Logo.ico" />
      </Head>
      <Bar isDarkMode={isDarkMode} setIsDarkMode={setIsDarkMode}></Bar>
      <ModalPopUp
        openPopUp={openPopUp}
        setOpenPopUp={setOpenPopUp}
      >
        <MensajeModal mensaje="Usuario Creado"></MensajeModal>
      </ModalPopUp>
      <ModalPopUp
        openPopUp={openPopUp2}
        setOpenPopUp={setOpenPopUp2}
      >
        <MensajeModal mensaje="Numero de Pedido Actualizado"></MensajeModal>
      </ModalPopUp>
      <div className={styles.superContainer}>
        <div className={styles.container}>
          {permisos.includes("Cambiar Numero de Pedidos") &&
            <div>
              <div className={styles.inputC}>
                <div className={styles.square1}><div>Numero de Pedido</div></div>
                <div className={styles.square2}>
                  <textarea type="text" className={styles.inp} onChange={(e) => setContador(e.target.value)} value={contador}>
                  </textarea>
                </div>
                <div className={styles.buttonC}>
                  <button className={styles.button} onClick={() => cambiarPedido()}>Cambiar Numero de Pedido</button>
                </div>
              </div>
            </div>
          }
          {permisos.includes("Crear Usuarios") &&
            <>
              <div className={styles.gridUser}>
                <div className={styles.inputC2}>
                  <div className={styles.square1}><div>Usuario</div></div>
                  <div className={styles.square2}>
                    <textarea type="text" className={styles.inp} onChange={(e) => setUsuario(e.target.value)} value={usuario}>
                    </textarea>
                  </div>
                </div>
                <div className={styles.inputC2}>
                  <div className={styles.square1}><div>Correo</div></div>
                  <div className={styles.square2}>
                    <textarea type="text" className={styles.inp} onChange={(e) => setPassword(e.target.value)} value={password}>
                    </textarea>
                  </div>
                </div>
              </div>
              <div className={styles.permisosContainer}>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Ver Clientes')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Ver Clientes')
                          ? prev.filter((source) => source !== 'Ver Clientes')
                          : [...prev, 'Ver Clientes']
                      );
                    }}
                  />
                  Ver Clientes
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Crear Clientes')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Crear Clientes')
                          ? prev.filter((source) => source !== 'Crear Clientes')
                          : [...prev, 'Crear Clientes']
                      );
                    }}
                  />
                  Crear Clientes
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Editar Clientes')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Editar Clientes')
                          ? prev.filter((source) => source !== 'Editar Clientes')
                          : [...prev, 'Editar Clientes']
                      );
                    }}
                  />
                  Editar Clientes
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Eliminar Clientes')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Eliminar Clientes')
                          ? prev.filter((source) => source !== 'Eliminar Clientes')
                          : [...prev, 'Eliminar Clientes']
                      );
                    }}
                  />
                  Eliminar Clientes
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Ver Pedido')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Ver Pedido')
                          ? prev.filter((source) => source !== 'Ver Pedido')
                          : [...prev, 'Ver Pedido']
                      );
                    }}
                  />
                  Ver Pedido
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Crear Pedido')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Crear Pedido')
                          ? prev.filter((source) => source !== 'Crear Pedido')
                          : [...prev, 'Crear Pedido']
                      );
                    }}
                  />
                  Crear Pedido
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Editar Pedido')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Editar Pedido')
                          ? prev.filter((source) => source !== 'Editar Pedido')
                          : [...prev, 'Editar Pedido']
                      );
                    }}
                  />
                  Editar Pedido
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Eliminar Pedido')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Eliminar Pedido')
                          ? prev.filter((source) => source !== 'Eliminar Pedido')
                          : [...prev, 'Eliminar Pedido']
                      );
                    }}
                  />
                  Eliminar Pedido
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Ver Usuarios')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Ver Usuarios')
                          ? prev.filter((source) => source !== 'Ver Usuarios')
                          : [...prev, 'Ver Usuarios']
                      );
                    }}
                  />
                  Ver Usuarios
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Crear Usuarios')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Crear Usuarios')
                          ? prev.filter((source) => source !== 'Crear Usuarios')
                          : [...prev, 'Crear Usuarios']
                      );
                    }}
                  />
                  Crear Usuarios
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Editar Usuarios')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Editar Usuarios')
                          ? prev.filter((source) => source !== 'Editar Usuarios')
                          : [...prev, 'Editar Usuarios']
                      );
                    }}
                  />
                  Editar Usuarios
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Eliminar Usuarios')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Eliminar Usuarios')
                          ? prev.filter((source) => source !== 'Eliminar Usuarios')
                          : [...prev, 'Eliminar Usuarios']
                      );
                    }}
                  />
                  Eliminar Usuarios
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Agregar Guia')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Agregar Guia')
                          ? prev.filter((source) => source !== 'Agregar Guia')
                          : [...prev, 'Agregar Guia']
                      );
                    }}
                  />
                  Agregar Guia
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Ver Finanzas')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Ver Finanzas')
                          ? prev.filter((source) => source !== 'Ver Finanzas')
                          : [...prev, 'Ver Finanzas']
                      );
                    }}
                  />
                  Ver Finanzas
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={selectedSources.includes('Cambiar Numero de Pedidos')}
                    onChange={() => {
                      setSelectedSources((prev) =>
                        prev.includes('Cambiar Numero de Pedidos')
                          ? prev.filter((source) => source !== 'Cambiar Numero de Pedidos')
                          : [...prev, 'Cambiar Numero de Pedidos']
                      );
                    }}
                  />
                  Cambiar Numero de Pedidos
                </label>
              </div>
              <div className={styles.containerButton}>
                <div className={styles.buttonC}>
                  <button className={styles.button} onClick={() => crearUsuario()}>Crear usuario</button>
                </div>
              </div>
            </>
          }
          <div className={styles.containerButton}>
            <TablaUsuarios data={usuarios} setActualizado={setActualizar}></TablaUsuarios>
          </div>
        </div>
      </div>
    </>
  )
}